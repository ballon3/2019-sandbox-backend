# Generated by Django 2.2.4 on 2019-08-22 01:49

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityGardensV20190122',
            fields=[
                ('ogc_fid', models.AutoField(primary_key=True, serialize=False)),
                ('objectid', models.IntegerField(blank=True, null=True)),
                ('propertyid', models.IntegerField(blank=True, null=True)),
                ('sitename', models.CharField(blank=True, max_length=50, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('acres', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('r_value', models.IntegerField(blank=True, null=True)),
                ('plotspergarden', models.IntegerField(blank=True, null=True)),
                ('waitlist', models.IntegerField(blank=True, null=True)),
                ('shape_length', models.FloatField(blank=True, null=True)),
                ('shape_area', models.FloatField(blank=True, null=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'community_gardens_v2019_01_22',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ParksV20190129',
            fields=[
                ('ogc_fid', models.AutoField(primary_key=True, serialize=False)),
                ('objectid', models.IntegerField(blank=True, null=True)),
                ('propertyid', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('acres', models.FloatField(blank=True, null=True)),
                ('shape_length', models.FloatField(blank=True, null=True)),
                ('shape_area', models.FloatField(blank=True, null=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'parks_v2019_01_29',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PdxMsa2010CensusBlockGroups',
            fields=[
                ('ogc_fid', models.AutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('tract', models.CharField(blank=True, max_length=50, null=True)),
                ('tract_no', models.FloatField(blank=True, null=True)),
                ('bg', models.CharField(blank=True, max_length=50, null=True)),
                ('trbg', models.CharField(blank=True, max_length=50, null=True)),
                ('fips', models.CharField(blank=True, max_length=50, null=True)),
                ('pop10', models.IntegerField(blank=True, null=True)),
                ('du10', models.IntegerField(blank=True, null=True)),
                ('vac10', models.IntegerField(blank=True, null=True)),
                ('white', models.IntegerField(blank=True, null=True)),
                ('black', models.IntegerField(blank=True, null=True)),
                ('aian', models.IntegerField(blank=True, null=True)),
                ('asian', models.IntegerField(blank=True, null=True)),
                ('nhpi', models.IntegerField(blank=True, null=True)),
                ('other_race', models.IntegerField(blank=True, null=True)),
                ('pop_2_race', models.IntegerField(blank=True, null=True)),
                ('hispanic', models.IntegerField(blank=True, null=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'pdx_msa_2010_census_block_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PdxMsa2010CensusTracts',
            fields=[
                ('ogc_fid', models.AutoField(primary_key=True, serialize=False)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('county', models.CharField(blank=True, max_length=50, null=True)),
                ('tract', models.CharField(blank=True, max_length=50, null=True)),
                ('tract_no', models.FloatField(blank=True, null=True)),
                ('fips', models.CharField(blank=True, max_length=50, null=True)),
                ('pop10', models.IntegerField(blank=True, null=True)),
                ('du10', models.IntegerField(blank=True, null=True)),
                ('vac10', models.IntegerField(blank=True, null=True)),
                ('white', models.IntegerField(blank=True, null=True)),
                ('black', models.IntegerField(blank=True, null=True)),
                ('aian', models.IntegerField(blank=True, null=True)),
                ('asian', models.IntegerField(blank=True, null=True)),
                ('nhpi', models.IntegerField(blank=True, null=True)),
                ('other_race', models.IntegerField(blank=True, null=True)),
                ('pop_2_race', models.IntegerField(blank=True, null=True)),
                ('hispanic', models.IntegerField(blank=True, null=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'pdx_msa_2010_census_tracts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PdxMsaNcdb',
            fields=[
                ('ogc_fid', models.AutoField(primary_key=True, serialize=False)),
                ('geo_fips', models.BigIntegerField(blank=True, null=True)),
                ('geo_state', models.IntegerField(blank=True, null=True)),
                ('geo_county', models.IntegerField(blank=True, null=True)),
                ('geo_tract', models.IntegerField(blank=True, null=True)),
                ('cbsa', models.IntegerField(blank=True, null=True)),
                ('metroname', models.CharField(blank=True, max_length=50, null=True)),
                ('tractcontrol', models.IntegerField(blank=True, null=True)),
                ('tractpopulation2010', models.IntegerField(blank=True, null=True)),
                ('medinc_90', models.FloatField(blank=True, null=True)),
                ('medinc_00', models.FloatField(blank=True, null=True)),
                ('medinc_10', models.FloatField(blank=True, null=True)),
                ('medinc_17', models.FloatField(blank=True, null=True)),
                ('medhomeval_90', models.FloatField(blank=True, null=True)),
                ('medhomeval_00', models.FloatField(blank=True, null=True)),
                ('medhomeval_10', models.FloatField(blank=True, null=True)),
                ('medhomeval_17', models.FloatField(blank=True, null=True)),
                ('medrentval_90', models.FloatField(blank=True, null=True)),
                ('medrentval_00', models.FloatField(blank=True, null=True)),
                ('medrentval_10', models.FloatField(blank=True, null=True)),
                ('medrentval_17', models.FloatField(blank=True, null=True)),
                ('ownshare_90', models.FloatField(blank=True, null=True)),
                ('ownshare_00', models.FloatField(blank=True, null=True)),
                ('ownshare_10', models.FloatField(blank=True, null=True)),
                ('ownshare_17', models.FloatField(blank=True, null=True)),
                ('whiteshare_90', models.FloatField(blank=True, null=True)),
                ('whiteshare_00', models.FloatField(blank=True, null=True)),
                ('whiteshare_10', models.FloatField(blank=True, null=True)),
                ('whiteshare_17', models.FloatField(blank=True, null=True)),
                ('blackshare_90', models.FloatField(blank=True, null=True)),
                ('blackshare_00', models.FloatField(blank=True, null=True)),
                ('blackshare_10', models.FloatField(blank=True, null=True)),
                ('blackshare_17', models.FloatField(blank=True, null=True)),
                ('hispshare_90', models.FloatField(blank=True, null=True)),
                ('hispshare_00', models.FloatField(blank=True, null=True)),
                ('hispshare_10', models.FloatField(blank=True, null=True)),
                ('hispshare_17', models.FloatField(blank=True, null=True)),
                ('asothshare_90', models.FloatField(blank=True, null=True)),
                ('asothshare_00', models.FloatField(blank=True, null=True)),
                ('asothshare_10', models.FloatField(blank=True, null=True)),
                ('asothshare_17', models.FloatField(blank=True, null=True)),
                ('rentcbshare_90', models.FloatField(blank=True, null=True)),
                ('rentcbshare_00', models.FloatField(blank=True, null=True)),
                ('rentcbshare_10', models.FloatField(blank=True, null=True)),
                ('rentcbshare_17', models.FloatField(blank=True, null=True)),
                ('povrate_90', models.FloatField(blank=True, null=True)),
                ('povrate_00', models.FloatField(blank=True, null=True)),
                ('povrate_10', models.FloatField(blank=True, null=True)),
                ('povrate_17', models.FloatField(blank=True, null=True)),
                ('bachshare_90', models.FloatField(blank=True, null=True)),
                ('bachshare_00', models.FloatField(blank=True, null=True)),
                ('bachshare_10', models.FloatField(blank=True, null=True)),
                ('bachshare_17', models.FloatField(blank=True, null=True)),
                ('chrent_9017', models.FloatField(blank=True, null=True)),
                ('chrent_0017', models.FloatField(blank=True, null=True)),
                ('chrent_1017', models.FloatField(blank=True, null=True)),
                ('chinc_9017', models.FloatField(blank=True, null=True)),
                ('chinc_0017', models.FloatField(blank=True, null=True)),
                ('chinc_1017', models.FloatField(blank=True, null=True)),
                ('chhomeval_9017', models.FloatField(blank=True, null=True)),
                ('chhomeval_0017', models.FloatField(blank=True, null=True)),
                ('chhomeval_1017', models.FloatField(blank=True, null=True)),
                ('chbachshare_9017', models.FloatField(blank=True, null=True)),
                ('chbachshare_0017', models.FloatField(blank=True, null=True)),
                ('chbachshare_1017', models.FloatField(blank=True, null=True)),
                ('chwhiteshare_9017', models.FloatField(blank=True, null=True)),
                ('chwhiteshare_0017', models.FloatField(blank=True, null=True)),
                ('chwhiteshare_1017', models.FloatField(blank=True, null=True)),
                ('chblackshare_9017', models.FloatField(blank=True, null=True)),
                ('chblackshare_0017', models.FloatField(blank=True, null=True)),
                ('chblackshare_1017', models.FloatField(blank=True, null=True)),
                ('chhispshare_9017', models.FloatField(blank=True, null=True)),
                ('chhispshare_0017', models.FloatField(blank=True, null=True)),
                ('chhispshare_1017', models.FloatField(blank=True, null=True)),
                ('chasothshare_9017', models.FloatField(blank=True, null=True)),
                ('chasothshare_0017', models.FloatField(blank=True, null=True)),
                ('chasothshare_1017', models.FloatField(blank=True, null=True)),
                ('chownshare_9017', models.FloatField(blank=True, null=True)),
                ('chownshare_0017', models.FloatField(blank=True, null=True)),
                ('chownshare_1017', models.FloatField(blank=True, null=True)),
                ('chpovrate_9017', models.FloatField(blank=True, null=True)),
                ('chpovrate_0017', models.FloatField(blank=True, null=True)),
                ('chpovrate_1017', models.FloatField(blank=True, null=True)),
                ('chrentcbshare_9017', models.FloatField(blank=True, null=True)),
                ('chrentcbshare_0017', models.FloatField(blank=True, null=True)),
                ('chrentcbshare_1017', models.FloatField(blank=True, null=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'pdx_msa_ncdb',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.CharField(max_length=50)),
                ('created', models.DateTimeField(null=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('data_endpoint', models.URLField()),
                ('metadata_endpoint', models.URLField()),
                ('rating', models.CharField(choices=[('UN', 'UN'), ('OP', 'Open'), ('CU', 'Curated'), ('BL', 'Blocked')], default='UN', max_length=2)),
                ('visualization_type', models.CharField(choices=[('UN', 'UN'), ('PM', 'Path Map'), ('IM', 'Icon Map'), ('SP', 'Small Polygon Map'), ('SM', 'ScatterPlot Map'), ('TX', 'Text'), ('CM', 'Choropleth Map')], default='UN', max_length=2)),
                ('creator', models.CharField(max_length=50)),
                ('aggregation', models.CharField(choices=[('UN', 'UN'), ('AG', 'Aggregatable'), ('AB', 'Aggregate By'), ('PA', 'Pre-Aggregated'), ('NO', 'None')], default='NO', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('value', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('metadata_endpoint', models.URLField()),
                ('created', models.DateTimeField(null=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('contributor', models.CharField(max_length=50, null=True)),
                ('curation', models.CharField(choices=[('UN', 'UN'), ('CC', 'Civic Curated'), ('CE', 'Civic Endorsed'), ('CA', 'Contributor Assembled'), ('UA', 'User Assembled')], default='UN', max_length=2)),
                ('affiliation', models.CharField(max_length=50)),
                ('layers', models.ManyToManyField(to='api.Layer')),
            ],
        ),
        migrations.AddField(
            model_name='layer',
            name='tags',
            field=models.ManyToManyField(to='api.Tag'),
        ),
    ]
